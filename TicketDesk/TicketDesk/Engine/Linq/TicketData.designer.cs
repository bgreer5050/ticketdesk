#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketDesk.Engine.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="TicketDesk")]
	public partial class TicketDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTicketTag(TicketTag instance);
    partial void UpdateTicketTag(TicketTag instance);
    partial void DeleteTicketTag(TicketTag instance);
    partial void InsertTicketComment(TicketComment instance);
    partial void UpdateTicketComment(TicketComment instance);
    partial void DeleteTicketComment(TicketComment instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertTicketEventNotification(TicketEventNotification instance);
    partial void UpdateTicketEventNotification(TicketEventNotification instance);
    partial void DeleteTicketEventNotification(TicketEventNotification instance);
    partial void InsertTicketAttachment(TicketAttachment instance);
    partial void UpdateTicketAttachment(TicketAttachment instance);
    partial void DeleteTicketAttachment(TicketAttachment instance);
    #endregion
		
		public TicketDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TicketDeskConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TicketDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TicketDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TicketDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TicketDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TicketTag> TicketTags
		{
			get
			{
				return this.GetTable<TicketTag>();
			}
		}
		
		public System.Data.Linq.Table<TicketComment> TicketComments
		{
			get
			{
				return this.GetTable<TicketComment>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<TicketEventNotification> TicketEventNotifications
		{
			get
			{
				return this.GetTable<TicketEventNotification>();
			}
		}
		
		public System.Data.Linq.Table<TicketAttachment> TicketAttachments
		{
			get
			{
				return this.GetTable<TicketAttachment>();
			}
		}
	}
	
	[Table(Name="dbo.TicketTags")]
	public partial class TicketTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketTagId;
		
		private string _TagName;
		
		private int _TicketId;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketTagIdChanging(int value);
    partial void OnTicketTagIdChanged();
    partial void OnTagNameChanging(string value);
    partial void OnTagNameChanged();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    #endregion
		
		public TicketTag()
		{
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[Column(Storage="_TicketTagId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TicketTagId
		{
			get
			{
				return this._TicketTagId;
			}
			set
			{
				if ((this._TicketTagId != value))
				{
					this.OnTicketTagIdChanging(value);
					this.SendPropertyChanging();
					this._TicketTagId = value;
					this.SendPropertyChanged("TicketTagId");
					this.OnTicketTagIdChanged();
				}
			}
		}
		
		[Column(Storage="_TagName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string TagName
		{
			get
			{
				return this._TagName;
			}
			set
			{
				if ((this._TagName != value))
				{
					this.OnTagNameChanging(value);
					this.SendPropertyChanging();
					this._TagName = value;
					this.SendPropertyChanged("TagName");
					this.OnTagNameChanged();
				}
			}
		}
		
		[Column(Storage="_TicketId", DbType="Int NOT NULL")]
		public int TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[Association(Name="Ticket_TicketTag", Storage="_Ticket", ThisKey="TicketId", OtherKey="TicketId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.TicketTags.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.TicketTags.Add(this);
						this._TicketId = value.TicketId;
					}
					else
					{
						this._TicketId = default(int);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TicketComments")]
	public partial class TicketComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketId;
		
		private int _CommentId;
		
		private string _CommentEvent;
		
		private string _Comment;
		
		private bool _IsHtml;
		
		private string _CommentedBy;
		
		private System.DateTime _CommentedDate;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<TicketEventNotification> _TicketEventNotifications;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnCommentEventChanging(string value);
    partial void OnCommentEventChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnIsHtmlChanging(bool value);
    partial void OnIsHtmlChanged();
    partial void OnCommentedByChanging(string value);
    partial void OnCommentedByChanged();
    partial void OnCommentedDateChanging(System.DateTime value);
    partial void OnCommentedDateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public TicketComment()
		{
			this._TicketEventNotifications = new EntitySet<TicketEventNotification>(new Action<TicketEventNotification>(this.attach_TicketEventNotifications), new Action<TicketEventNotification>(this.detach_TicketEventNotifications));
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[Column(Storage="_TicketId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[Column(Storage="_CommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[Column(Storage="_CommentEvent", DbType="NVarChar(500)", UpdateCheck=UpdateCheck.Never)]
		public string CommentEvent
		{
			get
			{
				return this._CommentEvent;
			}
			set
			{
				if ((this._CommentEvent != value))
				{
					this.OnCommentEventChanging(value);
					this.SendPropertyChanging();
					this._CommentEvent = value;
					this.SendPropertyChanged("CommentEvent");
					this.OnCommentEventChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_IsHtml", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsHtml
		{
			get
			{
				return this._IsHtml;
			}
			set
			{
				if ((this._IsHtml != value))
				{
					this.OnIsHtmlChanging(value);
					this.SendPropertyChanging();
					this._IsHtml = value;
					this.SendPropertyChanged("IsHtml");
					this.OnIsHtmlChanged();
				}
			}
		}
		
		[Column(Storage="_CommentedBy", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CommentedBy
		{
			get
			{
				return this._CommentedBy;
			}
			set
			{
				if ((this._CommentedBy != value))
				{
					this.OnCommentedByChanging(value);
					this.SendPropertyChanging();
					this._CommentedBy = value;
					this.SendPropertyChanged("CommentedBy");
					this.OnCommentedByChanged();
				}
			}
		}
		
		[Column(Storage="_CommentedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CommentedDate
		{
			get
			{
				return this._CommentedDate;
			}
			set
			{
				if ((this._CommentedDate != value))
				{
					this.OnCommentedDateChanging(value);
					this.SendPropertyChanging();
					this._CommentedDate = value;
					this.SendPropertyChanged("CommentedDate");
					this.OnCommentedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="TicketComment_TicketEventNotification", Storage="_TicketEventNotifications", ThisKey="TicketId,CommentId", OtherKey="TicketId,CommentId")]
		public EntitySet<TicketEventNotification> TicketEventNotifications
		{
			get
			{
				return this._TicketEventNotifications;
			}
			set
			{
				this._TicketEventNotifications.Assign(value);
			}
		}
		
		[Association(Name="Ticket_TicketComment", Storage="_Ticket", ThisKey="TicketId", OtherKey="TicketId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.TicketComments.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.TicketComments.Add(this);
						this._TicketId = value.TicketId;
					}
					else
					{
						this._TicketId = default(int);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketEventNotifications(TicketEventNotification entity)
		{
			this.SendPropertyChanging();
			entity.TicketComment = this;
		}
		
		private void detach_TicketEventNotifications(TicketEventNotification entity)
		{
			this.SendPropertyChanging();
			entity.TicketComment = null;
		}
	}
	
	[Table(Name="dbo.Tickets")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketId;
		
		private string _Type;
		
		private string _Category;
		
		private string _Title;
		
		private string _Details;
		
		private bool _IsHtml;
		
		private string _TagList;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private string _Owner;
		
		private string _AssignedTo;
		
		private string _CurrentStatus;
		
		private System.DateTime _CurrentStatusDate;
		
		private string _CurrentStatusSetBy;
		
		private string _LastUpdateBy;
		
		private System.DateTime _LastUpdateDate;
		
		private string _Priority;
		
		private bool _AffectsCustomer;
		
		private bool _PublishedToKb;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<TicketTag> _TicketTags;
		
		private EntitySet<TicketComment> _TicketComments;
		
		private EntitySet<TicketAttachment> _TicketAttachments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    partial void OnIsHtmlChanging(bool value);
    partial void OnIsHtmlChanged();
    partial void OnTagListChanging(string value);
    partial void OnTagListChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnAssignedToChanging(string value);
    partial void OnAssignedToChanged();
    partial void OnCurrentStatusChanging(string value);
    partial void OnCurrentStatusChanged();
    partial void OnCurrentStatusDateChanging(System.DateTime value);
    partial void OnCurrentStatusDateChanged();
    partial void OnCurrentStatusSetByChanging(string value);
    partial void OnCurrentStatusSetByChanged();
    partial void OnLastUpdateByChanging(string value);
    partial void OnLastUpdateByChanged();
    partial void OnLastUpdateDateChanging(System.DateTime value);
    partial void OnLastUpdateDateChanged();
    partial void OnPriorityChanging(string value);
    partial void OnPriorityChanged();
    partial void OnAffectsCustomerChanging(bool value);
    partial void OnAffectsCustomerChanged();
    partial void OnPublishedToKbChanging(bool value);
    partial void OnPublishedToKbChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Ticket()
		{
			this._TicketTags = new EntitySet<TicketTag>(new Action<TicketTag>(this.attach_TicketTags), new Action<TicketTag>(this.detach_TicketTags));
			this._TicketComments = new EntitySet<TicketComment>(new Action<TicketComment>(this.attach_TicketComments), new Action<TicketComment>(this.detach_TicketComments));
			this._TicketAttachments = new EntitySet<TicketAttachment>(new Action<TicketAttachment>(this.attach_TicketAttachments), new Action<TicketAttachment>(this.detach_TicketAttachments));
			OnCreated();
		}
		
		[Column(Storage="_TicketId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(500) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Details", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		[Column(Storage="_IsHtml", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsHtml
		{
			get
			{
				return this._IsHtml;
			}
			set
			{
				if ((this._IsHtml != value))
				{
					this.OnIsHtmlChanging(value);
					this.SendPropertyChanging();
					this._IsHtml = value;
					this.SendPropertyChanged("IsHtml");
					this.OnIsHtmlChanged();
				}
			}
		}
		
		[Column(Storage="_TagList", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string TagList
		{
			get
			{
				return this._TagList;
			}
			set
			{
				if ((this._TagList != value))
				{
					this.OnTagListChanging(value);
					this.SendPropertyChanging();
					this._TagList = value;
					this.SendPropertyChanged("TagList");
					this.OnTagListChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[Column(Storage="_AssignedTo", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string AssignedTo
		{
			get
			{
				return this._AssignedTo;
			}
			set
			{
				if ((this._AssignedTo != value))
				{
					this.OnAssignedToChanging(value);
					this.SendPropertyChanging();
					this._AssignedTo = value;
					this.SendPropertyChanged("AssignedTo");
					this.OnAssignedToChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CurrentStatus
		{
			get
			{
				return this._CurrentStatus;
			}
			set
			{
				if ((this._CurrentStatus != value))
				{
					this.OnCurrentStatusChanging(value);
					this.SendPropertyChanging();
					this._CurrentStatus = value;
					this.SendPropertyChanged("CurrentStatus");
					this.OnCurrentStatusChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentStatusDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CurrentStatusDate
		{
			get
			{
				return this._CurrentStatusDate;
			}
			set
			{
				if ((this._CurrentStatusDate != value))
				{
					this.OnCurrentStatusDateChanging(value);
					this.SendPropertyChanging();
					this._CurrentStatusDate = value;
					this.SendPropertyChanged("CurrentStatusDate");
					this.OnCurrentStatusDateChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentStatusSetBy", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CurrentStatusSetBy
		{
			get
			{
				return this._CurrentStatusSetBy;
			}
			set
			{
				if ((this._CurrentStatusSetBy != value))
				{
					this.OnCurrentStatusSetByChanging(value);
					this.SendPropertyChanging();
					this._CurrentStatusSetBy = value;
					this.SendPropertyChanged("CurrentStatusSetBy");
					this.OnCurrentStatusSetByChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdateBy", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LastUpdateBy
		{
			get
			{
				return this._LastUpdateBy;
			}
			set
			{
				if ((this._LastUpdateBy != value))
				{
					this.OnLastUpdateByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateBy = value;
					this.SendPropertyChanged("LastUpdateBy");
					this.OnLastUpdateByChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="NVarChar(25)", UpdateCheck=UpdateCheck.Never)]
		public string Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[Column(Storage="_AffectsCustomer", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool AffectsCustomer
		{
			get
			{
				return this._AffectsCustomer;
			}
			set
			{
				if ((this._AffectsCustomer != value))
				{
					this.OnAffectsCustomerChanging(value);
					this.SendPropertyChanging();
					this._AffectsCustomer = value;
					this.SendPropertyChanged("AffectsCustomer");
					this.OnAffectsCustomerChanged();
				}
			}
		}
		
		[Column(Storage="_PublishedToKb", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool PublishedToKb
		{
			get
			{
				return this._PublishedToKb;
			}
			set
			{
				if ((this._PublishedToKb != value))
				{
					this.OnPublishedToKbChanging(value);
					this.SendPropertyChanging();
					this._PublishedToKb = value;
					this.SendPropertyChanged("PublishedToKb");
					this.OnPublishedToKbChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="Ticket_TicketTag", Storage="_TicketTags", ThisKey="TicketId", OtherKey="TicketId")]
		public EntitySet<TicketTag> TicketTags
		{
			get
			{
				return this._TicketTags;
			}
			set
			{
				this._TicketTags.Assign(value);
			}
		}
		
		[Association(Name="Ticket_TicketComment", Storage="_TicketComments", ThisKey="TicketId", OtherKey="TicketId")]
		public EntitySet<TicketComment> TicketComments
		{
			get
			{
				return this._TicketComments;
			}
			set
			{
				this._TicketComments.Assign(value);
			}
		}
		
		[Association(Name="Ticket_TicketAttachment", Storage="_TicketAttachments", ThisKey="TicketId", OtherKey="TicketId")]
		public EntitySet<TicketAttachment> TicketAttachments
		{
			get
			{
				return this._TicketAttachments;
			}
			set
			{
				this._TicketAttachments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketTags(TicketTag entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_TicketTags(TicketTag entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
		
		private void attach_TicketComments(TicketComment entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_TicketComments(TicketComment entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
		
		private void attach_TicketAttachments(TicketAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_TicketAttachments(TicketAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
	}
	
	[Table(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SettingName;
		
		private string _SettingValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[Column(Storage="_SettingName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[Column(Storage="_SettingValue", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TicketEventNotifications")]
	public partial class TicketEventNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketId;
		
		private int _CommentId;
		
		private string _NotifyUser;
		
		private string _NotifyUserDisplayName;
		
		private string _NotifyEmail;
		
		private string _NotifyUserReason;
		
		private System.DateTime _CreatedDate;
		
		private int _DeliveryAttempts;
		
		private System.Nullable<System.DateTime> _LastDeliveryAttemptDate;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _NextDeliveryAttemptDate;
		
		private string _EventGeneratedByUser;
		
		private EntityRef<TicketComment> _TicketComment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnNotifyUserChanging(string value);
    partial void OnNotifyUserChanged();
    partial void OnNotifyUserDisplayNameChanging(string value);
    partial void OnNotifyUserDisplayNameChanged();
    partial void OnNotifyEmailChanging(string value);
    partial void OnNotifyEmailChanged();
    partial void OnNotifyUserReasonChanging(string value);
    partial void OnNotifyUserReasonChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnDeliveryAttemptsChanging(int value);
    partial void OnDeliveryAttemptsChanged();
    partial void OnLastDeliveryAttemptDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastDeliveryAttemptDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnNextDeliveryAttemptDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNextDeliveryAttemptDateChanged();
    partial void OnEventGeneratedByUserChanging(string value);
    partial void OnEventGeneratedByUserChanged();
    #endregion
		
		public TicketEventNotification()
		{
			this._TicketComment = default(EntityRef<TicketComment>);
			OnCreated();
		}
		
		[Column(Storage="_TicketId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					if (this._TicketComment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[Column(Storage="_CommentId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					if (this._TicketComment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[Column(Storage="_NotifyUser", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string NotifyUser
		{
			get
			{
				return this._NotifyUser;
			}
			set
			{
				if ((this._NotifyUser != value))
				{
					this.OnNotifyUserChanging(value);
					this.SendPropertyChanging();
					this._NotifyUser = value;
					this.SendPropertyChanged("NotifyUser");
					this.OnNotifyUserChanged();
				}
			}
		}
		
		[Column(Storage="_NotifyUserDisplayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NotifyUserDisplayName
		{
			get
			{
				return this._NotifyUserDisplayName;
			}
			set
			{
				if ((this._NotifyUserDisplayName != value))
				{
					this.OnNotifyUserDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._NotifyUserDisplayName = value;
					this.SendPropertyChanged("NotifyUserDisplayName");
					this.OnNotifyUserDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_NotifyEmail", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string NotifyEmail
		{
			get
			{
				return this._NotifyEmail;
			}
			set
			{
				if ((this._NotifyEmail != value))
				{
					this.OnNotifyEmailChanging(value);
					this.SendPropertyChanging();
					this._NotifyEmail = value;
					this.SendPropertyChanged("NotifyEmail");
					this.OnNotifyEmailChanged();
				}
			}
		}
		
		[Column(Storage="_NotifyUserReason", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NotifyUserReason
		{
			get
			{
				return this._NotifyUserReason;
			}
			set
			{
				if ((this._NotifyUserReason != value))
				{
					this.OnNotifyUserReasonChanging(value);
					this.SendPropertyChanging();
					this._NotifyUserReason = value;
					this.SendPropertyChanged("NotifyUserReason");
					this.OnNotifyUserReasonChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryAttempts", DbType="Int NOT NULL")]
		public int DeliveryAttempts
		{
			get
			{
				return this._DeliveryAttempts;
			}
			set
			{
				if ((this._DeliveryAttempts != value))
				{
					this.OnDeliveryAttemptsChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAttempts = value;
					this.SendPropertyChanged("DeliveryAttempts");
					this.OnDeliveryAttemptsChanged();
				}
			}
		}
		
		[Column(Storage="_LastDeliveryAttemptDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastDeliveryAttemptDate
		{
			get
			{
				return this._LastDeliveryAttemptDate;
			}
			set
			{
				if ((this._LastDeliveryAttemptDate != value))
				{
					this.OnLastDeliveryAttemptDateChanging(value);
					this.SendPropertyChanging();
					this._LastDeliveryAttemptDate = value;
					this.SendPropertyChanged("LastDeliveryAttemptDate");
					this.OnLastDeliveryAttemptDateChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_NextDeliveryAttemptDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> NextDeliveryAttemptDate
		{
			get
			{
				return this._NextDeliveryAttemptDate;
			}
			set
			{
				if ((this._NextDeliveryAttemptDate != value))
				{
					this.OnNextDeliveryAttemptDateChanging(value);
					this.SendPropertyChanging();
					this._NextDeliveryAttemptDate = value;
					this.SendPropertyChanged("NextDeliveryAttemptDate");
					this.OnNextDeliveryAttemptDateChanged();
				}
			}
		}
		
		[Column(Storage="_EventGeneratedByUser", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EventGeneratedByUser
		{
			get
			{
				return this._EventGeneratedByUser;
			}
			set
			{
				if ((this._EventGeneratedByUser != value))
				{
					this.OnEventGeneratedByUserChanging(value);
					this.SendPropertyChanging();
					this._EventGeneratedByUser = value;
					this.SendPropertyChanged("EventGeneratedByUser");
					this.OnEventGeneratedByUserChanged();
				}
			}
		}
		
		[Association(Name="TicketComment_TicketEventNotification", Storage="_TicketComment", ThisKey="TicketId,CommentId", OtherKey="TicketId,CommentId", IsForeignKey=true)]
		public TicketComment TicketComment
		{
			get
			{
				return this._TicketComment.Entity;
			}
			set
			{
				TicketComment previousValue = this._TicketComment.Entity;
				if (((previousValue != value) 
							|| (this._TicketComment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketComment.Entity = null;
						previousValue.TicketEventNotifications.Remove(this);
					}
					this._TicketComment.Entity = value;
					if ((value != null))
					{
						value.TicketEventNotifications.Add(this);
						this._TicketId = value.TicketId;
						this._CommentId = value.CommentId;
					}
					else
					{
						this._TicketId = default(int);
						this._CommentId = default(int);
					}
					this.SendPropertyChanged("TicketComment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TicketAttachments")]
	public partial class TicketAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketId;
		
		private int _FileId;
		
		private string _FileName;
		
		private int _FileSize;
		
		private string _FileType;
		
		private string _UploadedBy;
		
		private System.DateTime _UploadedDate;
		
		private System.Data.Linq.Binary _FileContents;
		
		private string _FileDescription;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    partial void OnFileIdChanging(int value);
    partial void OnFileIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileSizeChanging(int value);
    partial void OnFileSizeChanged();
    partial void OnFileTypeChanging(string value);
    partial void OnFileTypeChanged();
    partial void OnUploadedByChanging(string value);
    partial void OnUploadedByChanged();
    partial void OnUploadedDateChanging(System.DateTime value);
    partial void OnUploadedDateChanged();
    partial void OnFileContentsChanging(System.Data.Linq.Binary value);
    partial void OnFileContentsChanged();
    partial void OnFileDescriptionChanging(string value);
    partial void OnFileDescriptionChanged();
    #endregion
		
		public TicketAttachment()
		{
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[Column(Storage="_TicketId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[Column(Storage="_FileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if ((this._FileId != value))
				{
					this.OnFileIdChanging(value);
					this.SendPropertyChanging();
					this._FileId = value;
					this.SendPropertyChanged("FileId");
					this.OnFileIdChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileSize", DbType="Int NOT NULL")]
		public int FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this.OnFileSizeChanging(value);
					this.SendPropertyChanging();
					this._FileSize = value;
					this.SendPropertyChanged("FileSize");
					this.OnFileSizeChanged();
				}
			}
		}
		
		[Column(Storage="_FileType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		[Column(Storage="_UploadedBy", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UploadedBy
		{
			get
			{
				return this._UploadedBy;
			}
			set
			{
				if ((this._UploadedBy != value))
				{
					this.OnUploadedByChanging(value);
					this.SendPropertyChanging();
					this._UploadedBy = value;
					this.SendPropertyChanged("UploadedBy");
					this.OnUploadedByChanged();
				}
			}
		}
		
		[Column(Storage="_UploadedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UploadedDate
		{
			get
			{
				return this._UploadedDate;
			}
			set
			{
				if ((this._UploadedDate != value))
				{
					this.OnUploadedDateChanging(value);
					this.SendPropertyChanging();
					this._UploadedDate = value;
					this.SendPropertyChanged("UploadedDate");
					this.OnUploadedDateChanged();
				}
			}
		}
		
		[Column(Storage="_FileContents", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary FileContents
		{
			get
			{
				return this._FileContents;
			}
			set
			{
				if ((this._FileContents != value))
				{
					this.OnFileContentsChanging(value);
					this.SendPropertyChanging();
					this._FileContents = value;
					this.SendPropertyChanged("FileContents");
					this.OnFileContentsChanged();
				}
			}
		}
		
		[Column(Storage="_FileDescription", DbType="NVarChar(500)")]
		public string FileDescription
		{
			get
			{
				return this._FileDescription;
			}
			set
			{
				if ((this._FileDescription != value))
				{
					this.OnFileDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FileDescription = value;
					this.SendPropertyChanged("FileDescription");
					this.OnFileDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Ticket_TicketAttachment", Storage="_Ticket", ThisKey="TicketId", OtherKey="TicketId", IsForeignKey=true)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.TicketAttachments.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.TicketAttachments.Add(this);
						this._TicketId = value.TicketId;
					}
					else
					{
						this._TicketId = default(int);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
